{"version":3,"sources":["../../src/tools/arrays.js"],"names":["array","self","Array","Error","last","length","arr","otherCondition","filter","indexOf","elt","notIn","is","isIn","reduce","acc","curr","contains","element"],"mappings":"AAAA,OAAO,IAAMA,QAAQ,SAARA,KAAQ,OAAQ;AACzB,QAAG,CAACC,IAAD,IAAS,EAAEA,gBAAgBC,KAAlB,CAAZ,EACI,MAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;;AAEJ,WAAO;AACHC,cAAQ;AAAA,mBAAMH,KAAKI,MAAL,GAAc,CAAd,GAAkBJ,KAAKA,KAAKI,MAAL,GAAc,CAAnB,CAAlB,GAA0C,IAAhD;AAAA,SADL;AAEH,cAAQ,aAACC,GAAD;AAAA,gBAAMC,cAAN,uEAAuB;AAAA,uBAAO,IAAP;AAAA,aAAvB;AAAA,mBAAuCN,KAAKO,MAAL,CAAY;AAAA,uBACvDF,IAAIG,OAAJ,CAAYC,GAAZ,KAAoB,CAApB,IAAyBH,eAAeG,GAAf,CAD8B;AAAA,aAAZ,CAAvC;AAAA,SAFL;AAIHC,eAAQ,eAACL,GAAD;AAAA,gBAAMC,cAAN,uEAAuB;AAAA,uBAAO,IAAP;AAAA,aAAvB;AAAA,mBAAuCN,KAAKO,MAAL,CAAY;AAAA,uBACvDF,IAAIG,OAAJ,CAAYC,GAAZ,IAAmB,CAAnB,IAAwBH,eAAeG,GAAf,CAD+B;AAAA,aAAZ,CAAvC;AAAA,SAJL;AAMHE,YAAQ;AAAA,iCAAGC,IAAH;AAAA,gBAAGA,IAAH,6BAAU,EAAV;AAAA,kCAAcF,KAAd;AAAA,gBAAcA,KAAd,8BAAsB,EAAtB;AAAA,gBAA2BJ,cAA3B,uEAA4C;AAAA,uBAAO,IAAP;AAAA,aAA5C;AAAA,mBAA4DN,KAAKO,MAAL,CAAY;AAAA,uBAC5EK,KAAKC,MAAL,CAAY,UAACC,GAAD,EAAMC,IAAN;AAAA,2BAAeA,KAAKP,OAAL,CAAaC,GAAb,KAAqB,CAArB,IAA0BK,GAAzC;AAAA,iBAAZ,EAA0D,IAA1D,KACAJ,MAAMG,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN;AAAA,2BAAeA,KAAKP,OAAL,CAAaC,GAAb,IAAoB,CAApB,IAAyBK,GAAxC;AAAA,iBAAb,EAA0D,IAA1D,CADA,IAEAR,eAAeG,GAAf,CAH4E;AAAA,aAAZ,CAA5D;AAAA,SANL;AAUHO,kBAAU;AAAA,mBAAWhB,KAAKQ,OAAL,CAAaS,OAAb,KAAyB,CAApC;AAAA;AAVP,KAAP;AAYH,CAhBM;;;;;;;;kCAAMlB,K","file":"arrays.js","sourcesContent":["export const array = self => {\n    if(!self || !(self instanceof Array))\n        throw new Error(\"Bad array format\")\n\n    return {\n        last:   () => self.length > 0 ? self[self.length - 1] : null,\n        \"in\":   (arr, otherCondition = elt => true) => self.filter(elt =>\n            arr.indexOf(elt) >= 0 && otherCondition(elt)),\n        notIn:  (arr, otherCondition = elt => true) => self.filter(elt =>\n            arr.indexOf(elt) < 0 && otherCondition(elt)),\n        is:     ({ isIn = [], notIn = []}, otherCondition = elt => true) => self.filter(elt =>\n            isIn.reduce((acc, curr) => curr.indexOf(elt) >= 0 && acc, true) &&\n            notIn.reduce((acc, curr) => curr.indexOf(elt) < 0 && acc, true) &&\n            otherCondition(elt)),\n        contains: element => self.indexOf(element) >= 0\n    }\n}\n"]}