{"version":3,"sources":["../../src/tools/mixin.js"],"names":["mixin","target","mix","clone","prop","hasOwnProperty","deepMix","one","two","mergeArrays","Array"],"mappings":";;;;;;AAAA,OAAO,IAAMA,QAAQ,SAARA,KAAQ,CAASC,MAAT,EAAiBC,GAAjB,EAAsB;AACvC,QAAG,CAACD,MAAD,IAAW,CAACC,GAAZ,IAAmB,QAAOD,MAAP,yCAAOA,MAAP,OAAkB,QAArC,IAAiD,QAAOC,GAAP,yCAAOA,GAAP,OAAe,QAAnE,EACI,OAAO,EAAP;;AAEJ,QAAMC,QAAQ,EAAd;AACA,SAAI,IAAMC,IAAV,IAAkBH,MAAlB,EAA0B;AACtB,YAAGA,OAAOI,cAAP,CAAsBD,IAAtB,CAAH,EACID,MAAMC,IAAN,IAAcH,OAAOG,IAAP,CAAd;AACP;AACD,SAAI,IAAMA,KAAV,IAAkBF,GAAlB,EAAuB;AACnB,YAAGA,IAAIG,cAAJ,CAAmBD,KAAnB,CAAH,EAA6B;AACzBD,kBAAMC,KAAN,IAAcF,IAAIE,KAAJ,CAAd;AACH;AACJ;;AAED,WAAOD,KAAP;AACH,CAhBM;;AAkBP,OAAO,IAAMG,UAAU,SAAVA,OAAU,CAASC,GAAT,EAAcC,GAAd,EAAwC;AAAA,QAArBC,WAAqB,uEAAP,KAAO;;AAC3D,QAAG,CAACF,GAAD,IAAQ,CAACC,GAAT,IAAgB,QAAOD,GAAP,yCAAOA,GAAP,OAAe,QAA/B,IAA2C,QAAOC,GAAP,yCAAOA,GAAP,OAAe,QAA7D,EACI,OAAO,EAAP;;AAEJ,QAAML,qBAAaI,GAAb,CAAN;AACA,SAAI,IAAMH,IAAV,IAAkBI,GAAlB,EAAuB;AACnB,YAAGA,IAAIH,cAAJ,CAAmBD,IAAnB,CAAH,EAA6B;AACzB,gBAAGI,IAAIJ,IAAJ,aAAqBM,KAArB,IAA8BH,IAAIH,IAAJ,aAAqBM,KAAtD,EAA6D;AACzDP,sBAAMC,IAAN,IAAcK,2CAAmBF,IAAIH,IAAJ,CAAnB,sBAAiCI,IAAIJ,IAAJ,CAAjC,KAA+CD,MAAMC,IAAN,IAAcI,IAAIJ,IAAJ,CAA3E;AACH,aAFD,MAEO,IAAG,QAAOI,IAAIJ,IAAJ,CAAP,MAAqB,QAArB,IAAiC,QAAOG,IAAIH,IAAJ,CAAP,MAAqB,QAAzD,EAAmE;AACtED,sBAAMC,IAAN,IAAcE,QAAQC,IAAIH,IAAJ,CAAR,EAAmBI,IAAIJ,IAAJ,CAAnB,EAA8BK,WAA9B,CAAd;AACH,aAFM,MAEA;AACHN,sBAAMC,IAAN,IAAcI,IAAIJ,IAAJ,CAAd;AACH;AACJ;AACJ;;AAED,WAAOD,KAAP;AACH,CAlBM;;;;;;;;kCAlBMH,K;;kCAkBAM,O","file":"mixin.js","sourcesContent":["export const mixin = function(target, mix) {\n    if(!target || !mix || typeof target !== \"object\" || typeof mix !== \"object\")\n        return {}\n\n    const clone = {}\n    for(const prop in target) {\n        if(target.hasOwnProperty(prop))\n            clone[prop] = target[prop]\n    }\n    for(const prop in mix) {\n        if(mix.hasOwnProperty(prop)) {\n            clone[prop] = mix[prop]\n        }\n    }\n\n    return clone\n}\n\nexport const deepMix = function(one, two, mergeArrays = false) {\n    if(!one || !two || typeof one !== \"object\" || typeof two !== \"object\")\n        return {}\n\n    const clone = { ...one }\n    for(const prop in two) {\n        if(two.hasOwnProperty(prop)) {\n            if(two[prop] instanceof Array && one[prop] instanceof Array) {\n                clone[prop] = mergeArrays ? [ ...one[prop], ...two[prop] ] : clone[prop] = two[prop]\n            } else if(typeof two[prop] === \"object\" && typeof one[prop] === \"object\") {\n                clone[prop] = deepMix(one[prop], two[prop], mergeArrays)\n            } else {\n                clone[prop] = two[prop]\n            }\n        }\n    }\n\n    return clone\n}"]}