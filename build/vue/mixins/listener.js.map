{"version":3,"sources":["../../../src/vue/mixins/listener.js"],"names":["mixListener","eventType","cb","mountOn","autoMount","regulate","self","listening","ticking","listenerRef","onEvent","instance","callback","window","requestAnimationFrame","event","mount","document","addEventListener","unmount","removeEventListener","created","beforeDestroy","beforeUpdate","$props"],"mappings":"AAAA;;AAEA,OAAO,IAAMA,cAAc,SAAdA,WAAc,GAMhB;AAAA,mFAAP,EAAO;AAAA,8BALPC,SAKO;AAAA,QALPA,SAKO,kCALK,OAKL;AAAA,uBAJPC,EAIO;AAAA,QAJPA,EAIO,2BAJF,UAIE;AAAA,4BAHPC,OAGO;AAAA,QAHPA,OAGO,gCAHG,IAGH;AAAA,8BAFPC,SAEO;AAAA,QAFPA,SAEO,kCAFK,KAEL;AAAA,6BADPC,QACO;AAAA,QADPA,QACO,iCADI,KACJ;;AAEP,QAAMC,OAAO;AACTC,mBAAW,KADF;AAETC,iBAAS,KAFA;AAGTC,qBAAa,IAHJ;AAITC,iBAAS,2BAAY;AACjB,gBAAG,CAACJ,KAAKG,WAAT,EACIH,KAAKG,WAAL,GAAmB,iBAAS;AACxB,oBAAGE,SAAST,EAAT,CAAH,EAAiB;AACb,wBAAGG,QAAH,EAAa;AACT,4BAAG,CAACC,KAAKE,OAAT,EAAkB;AACd,gCAAMI,WAAWD,SAAST,EAAT,CAAjB;AACAW,mCAAOC,qBAAP,CAA6B;AAAA,uCAAMF,SAASG,KAAT,EAAgB,YAAM;AAAET,yCAAKE,OAAL,GAAe,KAAf;AAAsB,iCAA9C,CAAN;AAAA,6BAA7B;AACH;AACDF,6BAAKE,OAAL,GAAe,IAAf;AACH,qBAND,MAOIG,SAAST,EAAT,EAAaa,KAAb;AACP;AACJ,aAXD;AAYJ,mBAAOT,KAAKG,WAAZ;AACH,SAnBQ;AAoBTO,aApBS,iBAoBHL,QApBG,EAoBO;AACZ,gBAAG,CAACL,KAAKC,SAAT,EAAoB;AAChBU,yBAASC,gBAAT,CAA0BjB,SAA1B,EAAqCK,KAAKI,OAAL,CAAaC,QAAb,CAArC;AACAL,qBAAKC,SAAL,GAAiB,IAAjB;AACH;AACJ,SAzBQ;AA0BTY,eA1BS,qBA0BC;AACN,gBAAGb,KAAKC,SAAR,EAAmB;AACfU,yBAASG,mBAAT,CAA6BnB,SAA7B,EAAwCK,KAAKG,WAA7C;AACAH,qBAAKC,SAAL,GAAiB,KAAjB;AACH;AACJ;AA/BQ,KAAb;;AAkCA,WAAO;AACHc,eADG,qBACO;AACN,gBAAGjB,SAAH,EAAcE,KAAKU,KAAL,CAAW,IAAX;AACjB,SAHE;AAIHM,qBAJG,2BAIa;AACZhB,iBAAKa,OAAL;AACH,SANE;AAOHI,oBAPG,0BAOY;AACX,gBAAGpB,OAAH,EAAYA,QAAQ,KAAKqB,MAAb,IAAuBlB,KAAKU,KAAL,CAAW,IAAX,CAAvB,GAA0CV,KAAKa,OAAL,EAA1C;AACf;AATE,KAAP;AAWH,CArDM","file":"listener.js","sourcesContent":["/* Adds a configurable global listener. */\n\nexport const mixListener = ({\n    eventType = \"click\",\n    cb = \"callback\",\n    mountOn = null,\n    autoMount = false,\n    regulate = false\n} = {}) => {\n\n    const self = {\n        listening: false,\n        ticking: false,\n        listenerRef: null,\n        onEvent: instance => {\n            if(!self.listenerRef)\n                self.listenerRef = event => {\n                    if(instance[cb]) {\n                        if(regulate) {\n                            if(!self.ticking) {\n                                const callback = instance[cb]\n                                window.requestAnimationFrame(() => callback(event, () => { self.ticking = false }))\n                            }\n                            self.ticking = true\n                        } else\n                            instance[cb](event)\n                    }\n                }\n            return self.listenerRef\n        },\n        mount(instance) {\n            if(!self.listening) {\n                document.addEventListener(eventType, self.onEvent(instance))\n                self.listening = true\n            }\n        },\n        unmount() {\n            if(self.listening) {\n                document.removeEventListener(eventType, self.listenerRef)\n                self.listening = false\n            }\n        }\n    }\n\n    return {\n        created() {\n            if(autoMount) self.mount(this)\n        },\n        beforeDestroy() {\n            self.unmount()\n        },\n        beforeUpdate() {\n            if(mountOn) mountOn(this.$props) ? self.mount(this) : self.unmount()\n        }\n    }\n}\n"]}