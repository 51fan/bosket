{"version":3,"sources":["../../../src/vue/components/TreeView.js"],"names":["object","tree","RootNode","defaults","TreeViewNode","combine","withLabels","withListener","TreeViewBase","name","props","data","searchInput","filtered","methods","onSearch","evt","input","currentTarget","value","$data","trim","$props","model","category","treeFilter","search","computed","computedModel","sort","wrapDragNDrop","rootNode","created","root","get","filter","prop","onSelect","onDrag","dragndrop","drag","onDrop","drop","onCancel","cancel","set","key","s","$forceUpdate","modifierCb","onKey","mounted","keyUpListener","subscribe","keyDownListener","render","rest","filteredModel","ancestors","folded","searched","searchBar","labels","mixCss","TreeView","eventType","autoMount"],"mappings":"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","file":"TreeView.js","sourcesContent":["import { object, tree } from \"../../tools\"\nimport { RootNode, defaults } from \"../../core\"\nimport { TreeViewNode } from \"./TreeViewNode\"\nimport { combine, withLabels, withListener } from \"../traits\"\n\nconst TreeViewBase = {\n    name: \"TreeView\",\n    props: [ \"model\", \"category\", \"selection\", \"onSelect\", \"display\", \"search\", \"transition\",\n        \"strategies\", \"labels\", \"css\", \"dragndrop\", \"sort\", \"disabled\", \"noOpener\", \"async\",\n        \"keyUpListener\", \"keyDownListener\", \"unique\" ],\n    data: () => ({\n        searchInput: \"\",\n        filtered: null\n    }),\n    methods: {\n        onSearch(evt) {\n            const input = evt.currentTarget.value\n            this.$data.searchInput = input\n            this.$data.filtered = !input.trim() ? null :\n                tree(this.$props.model, this.$props.category)\n                    .treeFilter(this.$props.search(input.trim()))\n        }\n    },\n    computed: {\n        computedModel() {\n            return this.$props.sort ?\n                this.$props.model.sort(this.$props.sort) :\n                this.$props.model\n        },\n        wrapDragNDrop() { return this.rootNode.wrapDragNDrop() }\n    },\n    created() {\n        const root = new RootNode(\n            {\n                get: () => ({\n                    ...defaults,\n                    ...object(this.$props).filter(prop => !!prop)\n                })\n            },\n            {\n                onSelect:   this.$props.onSelect,\n                onDrag:     this.$props.dragndrop && this.$props.dragndrop.drag,\n                onDrop:     this.$props.dragndrop && this.$props.dragndrop.drop,\n                onCancel:   this.$props.dragndrop && this.$props.dragndrop.cancel\n            },\n            {\n                get: () => ({ ...this.$data }),\n                set: s => {\n                    for(const key in s) {\n                        if(key in this.$data) this.$data[key] = s[key]\n                    }\n                }\n            },\n            this.$forceUpdate\n        )\n        this.modifierCb = root.onKey\n        this.rootNode = root\n    },\n    mounted() {\n        this.keyUpListener.subscribe(this.rootNode.onKey)\n        this.keyDownListener.subscribe(this.rootNode.onKey)\n    },\n    render() {\n        const { onSelect, sort, model, ...rest } = object(this.$props).filter(prop => !!prop)\n        const data = {\n            props: {\n                ...defaults,\n                ...rest,\n                model: this.computedModel,\n                filteredModel: this.$data.filtered,\n                onSelect: this.rootNode.onSelect,\n                dragndrop: this.wrapDragNDrop,\n                ancestors: [],\n                sort: sort,\n                folded: false,\n                searched: !!this.$data.searchInput.trim()\n            }\n        }\n\n        const searchBar = !this.$props.search ? null :\n            <input\n                type=\"search\"\n                class={ this.rootNode.mixCss(\"search\") }\n                value={ this.$data.searchInput }\n                placeholder={ this.$props.labels && this.$props.labels[\"search.placeholder\"] }\n                onInput={ this.onSearch } />\n\n        return (\n            <div class={ this.rootNode.mixCss(\"TreeView\") }>\n                { searchBar }\n                <TreeViewNode { ...data } />\n            </div>\n        )\n    }\n}\n\nexport const TreeView = combine(\n    withLabels(defaults.labels),\n    withListener({ eventType: \"keyup\", prop: \"keyUpListener\", autoMount: true }),\n    withListener({ eventType: \"keydown\", prop: \"keyDownListener\", autoMount: true })\n)(TreeViewBase)\n"]}