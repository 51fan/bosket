{"version":3,"sources":["../../../src/vue/components/TreeView.js"],"names":["object","tree","RootNode","defaults","TreeViewNode","withLabels","mixListener","TreeViewBase","name","mixins","eventType","cb","autoMount","created","rootNode","get","$props","onSelect","onDrag","dragndrop","drag","onDrop","drop","onCancel","cancel","$data","set","key","s","$forceUpdate","modifierCb","onKey","props","data","searchInput","filtered","methods","onSearch","evt","input","currentTarget","value","trim","model","category","treeFilter","search","computed","computedModel","sort","wrapDragNDrop","render","filter","prop","rest","filteredModel","ancestors","folded","searched","searchBar","labels","mixCss","TreeView"],"mappings":"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","file":"TreeView.js","sourcesContent":["import { object, tree } from \"../../tools\"\nimport { RootNode, defaults } from \"../../core\"\nimport { TreeViewNode } from \"./TreeViewNode\"\nimport { withLabels } from \"../traits\"\nimport { mixListener } from \"../mixins\"\n\nconst TreeViewBase = {\n    name: \"TreeView\",\n    mixins: [\n        mixListener({ eventType: \"keydown\", cb: \"modifierCb\", autoMount: true }),\n        mixListener({ eventType: \"keyup\",   cb: \"modifierCb\", autoMount: true })\n    ],\n    created() {\n        this.rootNode = new RootNode(\n            {\n                get: () => ({ ...defaults, ...this.$props })\n            },\n            {\n                onSelect:   this.$props.onSelect,\n                onDrag:     this.$props.dragndrop && this.$props.dragndrop.drag,\n                onDrop:     this.$props.dragndrop && this.$props.dragndrop.drop,\n                onCancel:   this.$props.dragndrop && this.$props.dragndrop.cancel\n            },\n            {\n                get: () => ({ ...this.$data }),\n                set: s => {\n                    for(const key in s) {\n                        if(key in this.$data) this.$data[key] = s[key]\n                    }\n                }\n            },\n            this.$forceUpdate\n        )\n        this.modifierCb = this.rootNode.onKey\n    },\n    props: [ \"model\", \"category\", \"selection\", \"onSelect\", \"display\", \"search\", \"transition\",\n        \"strategies\", \"labels\", \"css\", \"dragndrop\", \"sort\", \"disabled\", \"noOpener\", \"async\" ],\n    data: () => ({\n        searchInput: \"\",\n        filtered: null\n    }),\n    methods: {\n        onSearch(evt) {\n            const input = evt.currentTarget.value\n            this.$data.searchInput = input\n            this.$data.filtered = !input.trim() ? null :\n                tree(this.$props.model, this.$props.category)\n                    .treeFilter(this.$props.search(input.trim()))\n        }\n    },\n    computed: {\n        computedModel() {\n            return this.$props.sort ?\n                this.$props.model.sort(this.$props.sort) :\n                this.$props.model\n        },\n        wrapDragNDrop() { return this.rootNode.wrapDragNDrop() }\n    },\n    render() {\n        const { onSelect, sort, model, ...rest } = object(this.$props).filter(prop => !!prop)\n        const data = {\n            props: {\n                ...defaults,\n                ...rest,\n                model: this.computedModel,\n                filteredModel: this.$data.filtered,\n                onSelect: this.rootNode.onSelect,\n                dragndrop: this.wrapDragNDrop,\n                ancestors: [],\n                sort: sort,\n                folded: false,\n                searched: !!this.$data.searchInput.trim()\n            }\n        }\n\n        const searchBar = !this.$props.search ? null :\n            <input\n                type=\"search\"\n                class={ this.rootNode.mixCss(\"search\") }\n                value={ this.$data.searchInput }\n                placeholder={ this.$props.labels && this.$props.labels[\"search.placeholder\"] }\n                onInput={ this.onSearch } />\n\n        return (\n            <div class={ this.rootNode.mixCss(\"TreeView\") }>\n                { searchBar }\n                <TreeViewNode { ...data } />\n            </div>\n        )\n    }\n}\n\nexport const TreeView = withLabels(defaults.labels)(TreeViewBase)\n"]}