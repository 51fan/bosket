{"version":3,"sources":["../../../src/vue/components/TreeViewNode.js"],"names":["array","object","withTransition","TreeNode","TreeViewNodeBase","name","created","node","get","$props","$data","set","key","s","_unmounted","$forceUpdate","beforeDestroy","props","data","unfolded","computed","childrenModel","map","Map","model","forEach","hasChildren","item","isAsync","sort","category","rootDragData","rootData","getDragEvents","depth","attrs","draggable","nestPrefix","_","toLowerCase","render","renderSubtree","filteredModel","isFolded","pending","contains","unwrapPromise","ancestors","folded","loading","renderOpener","OpenerComponent","noOpener","mixCss","onOpener","display","opener","list","filter","searched","has","m","idx","rawLiData","liCss","liData","onClick","ulCss","TreeViewNode"],"mappings":"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","file":"TreeViewNode.js","sourcesContent":["import { array, object } from \"../../tools\"\nimport { withTransition } from \"../traits\"\nimport { TreeNode } from \"../../core\"\n\nconst TreeViewNodeBase = {\n    name: \"TreeViewNode\",\n    created() {\n        this.node = new TreeNode(\n            { get: () => this.$props },\n            {},\n            {\n                get: () => this.$data,\n                set: s => {\n                    for(const key in s) {\n                        if(key in this.$data) this.$data[key] = s[key]\n                    }\n                }\n            },\n            () => { if(!this._unmounted) this.$forceUpdate() }\n        )\n    },\n    beforeDestroy() {\n        this._unmounted = true\n    },\n    props: [ \"model\", \"category\", \"selection\", \"onSelect\", \"display\", \"strategies\", \"dragndrop\",\n        \"labels\", \"sort\", \"disabled\", \"noOpener\", \"async\", \"css\", \"folded\", \"transition\",\n        \"loading\", \"depth\", \"ancestors\", \"searched\", \"onSelect\", \"filteredModel\" ],\n    data: () => ({\n        unfolded: []\n    }),\n    computed: {\n        childrenModel() {\n            const map = new Map()\n            this.$props.model.forEach(item => {\n                if(this.node.hasChildren(item) && !this.node.isAsync(item))\n                    map.set(item, this.$props.sort ?\n                        item[this.$props.category].sort(this.$props.sort) :\n                        item[this.$props.category])\n            })\n            return map\n        },\n        rootDragData() {\n            const rootData = this.node.getDragEvents(null, !this.$props.depth)\n            return {\n                attrs: { draggable: rootData.draggable },\n                ...object(rootData).nestPrefix(\"on\", _ => _.toLowerCase())\n            }\n        }\n    },\n    render() {\n        const renderSubtree = item => {\n            if(!this.node.hasChildren(item) && !this.node.isAsync(item))\n                return null\n\n            let filteredModel = null\n\n            /* If data has to be retrieved asynchronously */\n            if(this.node.isAsync(item) && !this.node.isFolded(item) && !array(this.node.pending).contains(item)) {\n                this.node.unwrapPromise(item)\n            }\n            if(this.$props.filteredModel) {\n                filteredModel = this.$props.filteredModel.get(item)\n            }\n\n            const data = {\n                props: {\n                    ...this.$props,\n                    model: this.childrenModel.get(item),\n                    filteredModel: filteredModel,\n                    ancestors: [ ...this.$props.ancestors, item ],\n                    depth: (this.$props.depth || 0) + 1,\n                    folded: this.node.isFolded(item),\n                    loading: this.node.isAsync(item) && !this.node.isFolded(item)\n                }\n            }\n\n            return  (\n                <TreeViewNode { ...data }></TreeViewNode>\n            )\n        }\n\n        const renderOpener = (item, OpenerComponent) =>\n            (this.node.hasChildren(item) || this.node.isAsync(item)) && !this.$props.noOpener ?\n                <OpenerComponent class={ this.node.mixCss(\"opener\") } onClick={ this.node.onOpener(item) }></OpenerComponent> :\n                null\n\n        const { model, folded, display, loading } = this.$props\n\n        if(folded)\n            return null\n\n        /* If data has to be retrieved asynchronously */\n        if(loading) {\n            return <span></span>\n        }\n\n        const OpenerComponent = this.$props.opener || \"span\"\n        const list = model\n            .filter(m => !this.$props.searched || this.$props.filteredModel && this.$props.filteredModel.has(m))\n            .map((item, idx) => {\n                const rawLiData = {\n                    ...this.node.getDragEvents(item),\n                    \"class\": this.node.liCss(item)\n                }\n                const liData = {\n                    attrs: { draggable: rawLiData.draggable },\n                    ...object(rawLiData).nestPrefix(\"on\", _ => _.toLowerCase())\n                }\n                return <li { ...liData }>\n                    <span class={ this.node.mixCss(\"item\") } onClick={ this.node.onClick(item) }>\n                        { display && display(item, this.$props) }\n                        { renderOpener(item, OpenerComponent) }\n                    </span>\n                    { renderSubtree(item) }\n                </li>\n            })\n\n        return (\n            <ul class={ this.node.ulCss() } { ...this.rootDragData }>\n                { list }\n            </ul>\n        )\n    }\n}\n\nexport const TreeViewNode = withTransition({ key: props => props.folded || props.loading })(TreeViewNodeBase)\n"]}