// @flow

import {css, array, tree} from "@bosket/tools";
declare class Class0 extends MouseEvent {

  dataTransfer: ?DataTransfer;
}
declare class Class1 extends Blob {

  lastModifiedDate: any;
  name: string;
  constructor(fileBits: $ReadOnlyArray<string | ArrayBuffer | $TypedArray | DataView | Blob>, filename: string, options?: {lastModified?: number, type?: string}): void;
}
declare export var dragndrop: {paste: (model: (_: void) => Array<Object>, cb: (_: Array<Object>) => void) => {drop: (target: Object, event: Class0, inputs: Object) => void, droppable: boolean}, pluck: (model: (_: void) => Array<Object>, cb: (_: Array<Object>) => void) => {backup: [], cancel: () => void, drag: (item: Object, event: Class0, inputs: Object) => void, draggable: boolean}, selection: (model: (_: void) => Array<Object>, cb: (_: Array<Object>) => void) => {drag: (item: Object, event: Class0, inputs: Object) => void, draggable: boolean, drop: (target: ?Object, event: Class0, inputs: Object) => void, droppable: boolean, guard: (target: ?Object, event: Class0, inputs: Object) => boolean}};
declare export var nodeEvents: {onDragEnd: (item: ?Object) => (event: Class0) => void, onDragEnter: (item: ?Object) => (event: Class0) => void, onDragLeave: (item: ?Object) => (event: Class0) => void, onDragOver: (item: ?Object) => (event: Class0) => void, onDragStart: (item: ?Object) => (event: Class0) => void, onDrop: (item: ?Object) => (event: Class0) => void};
declare export var utils: {filesystem: (event: Class0) => null | []};
declare export function wrapEvents(): any;
