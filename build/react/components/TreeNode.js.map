{"version":3,"sources":["../../../src/react/components/TreeNode.js"],"names":["React","array","withTransition","TreeNode","ItemTreeNodeBaseClass","props","state","unfolded","_state","get","set","setState","s","_props","renderSubtree","node","hasChildren","item","isAsync","childModel","category","filteredModel","isFolded","pending","contains","unwrapPromise","sort","ancestors","depth","renderOpener","OpenerComponent","noOpener","mixCss","onOpener","_unmounted","forceUpdate","model","folded","display","key","loading","opener","list","filter","searched","has","m","map","idx","liCss","onClick","getDragEvents","ulCss","dragndrop","draggable","PureComponent","ItemTreeNode"],"mappings":"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","file":"TreeNode.js","sourcesContent":["import React from \"react\"\nimport { array } from \"../../tools\"\nimport { withTransition } from \"../traits\"\nimport { TreeNode } from \"../../core\"\n\n/* Node component */\nclass ItemTreeNodeBaseClass extends React.PureComponent {\n\n    /* Lifecycle & data */\n\n    state = {\n        unfolded: []\n    }\n    _state = {\n        get: () => this.state,\n        set:  s => this.setState(s)\n    }\n    _props = {\n        get: () => this.props\n    }\n\n    constructor(props) {\n        super(props)\n        this.node = new TreeNode(\n            this._props,\n            null,\n            this._state,\n            () => { if(!this._unmounted) this.forceUpdate() }\n        )\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true\n    }\n\n    /* Rendering */\n\n    renderSubtree = item => {\n        if(!this.node.hasChildren(item) && !this.node.isAsync(item))\n            return null\n\n        let childModel = item[this.props.category]\n        let filteredModel = null\n\n        /* If data has to be retrieved asynchronously */\n        if(this.node.isAsync(item) && !this.node.isFolded(item) && !array(this.node.pending).contains(item)) {\n            this.node.unwrapPromise(item)\n        }\n        if(!this.node.isAsync(item)) {\n            childModel = this.props.sort ? childModel.sort(this.props.sort) : childModel\n        }\n        if(this.props.filteredModel) {\n            filteredModel = this.props.filteredModel.get(item)\n        }\n\n        return  (\n            <ItemTreeNode\n                { ...this.props }\n                model={ childModel }\n                filteredModel={ filteredModel }\n                ancestors={ [ ...this.props.ancestors, item ] }\n                depth={ (this.props.depth || 0) + 1 }\n                folded={ this.node.isFolded(item) }\n                loading={ this.node.isAsync(item) && !this.node.isFolded(item) }>\n            </ItemTreeNode>\n        )\n    }\n\n    renderOpener = (item, OpenerComponent) =>\n        (this.node.hasChildren(item) || this.node.isAsync(item)) && !this.props.noOpener ?\n            <OpenerComponent className={ this.node.mixCss(\"opener\") } onClick={ this.node.onOpener(item) }></OpenerComponent> :\n            null\n\n    render() {\n        const { model, folded, display, key, loading } = this.props\n\n        if(folded)\n            return null\n\n        /* If data has to be retrieved asynchronously */\n        if(loading) {\n            return <span></span>\n        }\n\n        const OpenerComponent = this.props.opener || \"span\"\n        const list = model\n                .filter(m => !this.props.searched || this.props.filteredModel.has(m))\n                .map((item, idx) =>\n                    <li key={ key && key(item) || idx }\n                        className={ this.node.liCss(item) }\n                        onClick={ this.node.onClick(item) }\n                        { ...this.node.getDragEvents(item) }>\n                        <span className={ this.node.mixCss(\"item\") }>\n                            { display(item) }\n                            { this.renderOpener(item, OpenerComponent) }\n                        </span>\n                        { this.renderSubtree(item) }\n                    </li>\n                )\n\n        return (\n            <ul className={ this.node.ulCss() }\n                    { ...this.node.getDragEvents(null, this.props.dragndrop.draggable && !this.props.depth) }>\n                { list }\n            </ul>\n        )\n    }\n}\nexport const ItemTreeNode = withTransition({ key: props => props.folded || props.loading })(ItemTreeNodeBaseClass)"]}