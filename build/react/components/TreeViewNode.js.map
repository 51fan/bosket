{"version":3,"sources":["../../../src/react/components/TreeViewNode.js"],"names":["React","array","withTransition","TreeNode","TreeViewNodeBaseClass","props","state","unfolded","_state","get","set","s","setState","_props","renderSubtree","item","node","hasChildren","isAsync","childModel","category","filteredModel","isFolded","pending","contains","unwrapPromise","sort","ancestors","depth","renderOpener","OpenerComponent","noOpener","mixCss","onOpener","_unmounted","forceUpdate","model","folded","display","key","loading","opener","list","filter","searched","has","m","map","idx","liCss","onClick","getDragEvents","ulCss","PureComponent","TreeViewNode"],"mappings":"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","file":"TreeViewNode.js","sourcesContent":["// @flow\n\nimport React from \"react\"\nimport { array } from \"../../tools\"\nimport { withTransition } from \"../traits\"\nimport { TreeNode } from \"../../core\"\n\nimport type { TreeNodeInput } from \"../../core/logic\"\n\ntype TreeViewNodeProps = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    ancestors:          Object[],\n    strategies?:        Object,\n    disabled?:          Object => boolean,\n    dragndrop?:         Object,\n    css?:               { [key: string]: string },\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    depth?:             number,\n    sort?:              (Object, Object) => number,\n    key?:               Object => string,\n    display?:           (Object, Object[]) => any,\n    filteredModel:      null | Map<Object, *>,\n    folded:             boolean,\n    loading?:           boolean,\n    noOpener?:          boolean,\n    opener?:            Class<React.Component<*, *, *>>,\n    searched:           boolean\n}\n\ntype TreeViewNodeState = { unfolded: Object[] }\n\n/* Node component */\nclass TreeViewNodeBaseClass extends React.PureComponent<*, TreeViewNodeProps, TreeViewNodeState> {\n\n    /* Lifecycle & data */\n    node: TreeNode\n    _unmounted: boolean\n\n    state : TreeViewNodeState = {\n        unfolded: []\n    }\n    _state = {\n        get: () => this.state,\n        set: (s: Object) => this.setState(s)\n    }\n    _props = {\n        get: () => this.props\n    }\n\n    constructor(props: TreeViewNodeProps & TreeNodeInput) {\n        super(props)\n        this.node = new TreeNode(\n            this._props,\n            {},\n            this._state,\n            () => { if(!this._unmounted) this.forceUpdate() }\n        )\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true\n    }\n\n    /* Rendering */\n\n    renderSubtree = (item: Object) => {\n        if(!this.node.hasChildren(item) && !this.node.isAsync(item))\n            return null\n\n        let childModel = item[this.props.category]\n        let filteredModel = null\n\n        /* If data has to be retrieved asynchronously */\n        if(this.node.isAsync(item) && !this.node.isFolded(item) && !array(this.node.pending).contains(item)) {\n            this.node.unwrapPromise(item)\n        }\n        if(!this.node.isAsync(item)) {\n            childModel = this.props.sort ? childModel.sort(this.props.sort) : childModel\n        }\n        if(this.props.filteredModel) {\n            filteredModel = this.props.filteredModel.get(item)\n        }\n\n        return  (\n            <TreeViewNode\n                { ...(this.props: TreeViewNodeProps) }\n                model={ childModel }\n                filteredModel={ filteredModel }\n                ancestors={ [ ...this.props.ancestors, item ] }\n                depth={ (this.props.depth || 0) + 1 }\n                folded={ this.node.isFolded(item) }\n                loading={ this.node.isAsync(item) && !this.node.isFolded(item) }>\n            </TreeViewNode>\n        )\n    }\n\n    renderOpener = (item: Object, OpenerComponent: Class<React.Component<*, *, *>> | string) =>\n        (this.node.hasChildren(item) || this.node.isAsync(item)) && !this.props.noOpener ?\n            <OpenerComponent className={ this.node.mixCss(\"opener\") } onClick={ this.node.onOpener(item) }></OpenerComponent> :\n            null\n\n    render() {\n        const { model, folded, display, key, loading } = this.props\n\n        if(folded)\n            return null\n\n        /* If data has to be retrieved asynchronously */\n        if(loading) {\n            return <span></span>\n        }\n\n        const OpenerComponent = this.props.opener || \"span\"\n        const list = model\n            .filter(m => !this.props.searched || this.props.filteredModel && this.props.filteredModel.has(m))\n            .map((item, idx) =>\n                <li key={ key && key(item) || idx }\n                    className={ this.node.liCss(item) }\n                    onClick={ this.node.onClick(item) }\n                    { ...this.node.getDragEvents(item) }>\n                    <span className={ this.node.mixCss(\"item\") }>\n                        { display && display(item, this.props.ancestors) }\n                        { this.renderOpener(item, OpenerComponent) }\n                    </span>\n                    { this.renderSubtree(item) }\n                </li>\n            )\n\n        return (\n            <ul className={ this.node.ulCss() }\n                { ...this.node.getDragEvents(null, !this.props.depth) }>\n                { list }\n            </ul>\n        )\n    }\n}\nexport const TreeViewNode = withTransition({ key: props => props.folded || props.loading })(TreeViewNodeBaseClass)\n"]}