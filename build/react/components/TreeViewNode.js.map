{"version":3,"sources":["../../../src/react/components/TreeViewNode.js"],"names":["React","array","TreeNode","withTransition","TreeViewNodeBaseClass","props","ancestorsMap","Map","state","unfolded","renderSubtree","item","node","hasChildren","isAsync","childModel","category","filteredModel","isFolded","pending","contains","unwrapPromise","sort","get","depth","renderOpener","OpenerComponent","openerOpts","position","mixCss","onOpener","_props","_state","set","s","setState","_unmounted","forceUpdate","model","Array","forEach","ancestors","nextProps","newMap","lastVal","folded","display","unique","loading","opener","list","filter","searched","has","m","map","idx","liCss","getDragEvents","onClick","ulCss","PureComponent","TreeViewNode","key"],"mappings":"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","file":"TreeViewNode.js","sourcesContent":["// @flow\n\nimport React from \"react\"\nimport { array } from \"@bosket/tools\"\nimport { TreeNode } from \"@bosket/core\"\nimport { withTransition } from \"../traits\"\n\nimport type { Key } from \"react\"\nimport type { TreeNodeInput } from \"@bosket/core\"\n\ntype TreeViewNodeProps = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    ancestors:          Object[],\n    strategies?:        Object,\n    disabled?:          Object => boolean,\n    dragndrop?:         Object,\n    css?:               { [key: string]: string },\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    depth?:             number,\n    sort?:              (Object, Object) => number,\n    unique?:            Object => Key,\n    display?:           (Object, Object) => any,\n    filteredModel:      null | Map<Object, *>,\n    folded:             boolean,\n    loading?:           boolean,\n    openerOpts:         { position?: \"none\" | \"left\" | \"right\" },\n    opener?:            Class<React.Component<*, *>>,\n    searched:           boolean\n}\n\ntype TreeViewNodeState = { unfolded: Object[] }\n\n/* Node component */\nclass TreeViewNodeBaseClass extends React.PureComponent<TreeViewNodeProps, TreeViewNodeState> {\n\n    /* Lifecycle & data */\n    node: TreeNode\n    _unmounted: boolean\n    ancestorsMap : Map<Object, Object[]> = new Map()\n\n    state : TreeViewNodeState = {\n        unfolded: []\n    }\n\n    constructor(props: TreeViewNodeProps & TreeNodeInput) {\n        super(props)\n\n        const _props = {\n            get: () => this.props\n        }\n        const _state = {\n            get: () => this.state,\n            set: (s: Object) => this.setState(s)\n        }\n\n        this.node = new TreeNode(\n            _props,\n            {},\n            _state,\n            () => { if(!this._unmounted) this.forceUpdate() }\n        )\n\n        if(this.props.model instanceof Array) {\n            this.props.model.forEach(item => item && this.ancestorsMap.set(item, [ ...this.props.ancestors, item ]))\n        }\n    }\n\n    componentWillUnmount() {\n        this._unmounted = true\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(this.props.model !== nextProps.model) {\n            if(nextProps.model instanceof Array) {\n                const newMap = new Map()\n                nextProps.model.forEach(item => {\n                    if(!item) return\n                    const lastVal = this.ancestorsMap.get(item)\n                    if(lastVal)\n                        newMap.set(item, lastVal)\n                    else\n                        newMap.set(item, [ ...this.props.ancestors, item ])\n                })\n                this.ancestorsMap = newMap\n            }\n        }\n    }\n\n    /* Rendering */\n\n    renderSubtree = (item: Object) => {\n        if(!this.node.hasChildren(item) && !this.node.isAsync(item))\n            return null\n\n        let childModel = item[this.props.category]\n        let filteredModel = null\n\n        /* If data has to be retrieved asynchronously */\n        if(this.node.isAsync(item) && !this.node.isFolded(item) && !array(this.node.pending).contains(item)) {\n            this.node.unwrapPromise(item)\n        }\n        if(!this.node.isAsync(item)) {\n            childModel = this.props.sort ? childModel.sort(this.props.sort) : childModel\n        }\n        if(this.props.filteredModel) {\n            filteredModel = this.props.filteredModel.get(item)\n        }\n\n        return  (\n            <TreeViewNode\n                { ...(this.props: TreeViewNodeProps) }\n                model={ childModel }\n                filteredModel={ filteredModel }\n                ancestors={ this.ancestorsMap.get(item) || [] }\n                depth={ (this.props.depth || 0) + 1 }\n                folded={ this.node.isFolded(item) }\n                loading={ this.node.isAsync(item) && !this.node.isFolded(item) }>\n            </TreeViewNode>\n        )\n    }\n\n    renderOpener = (item: Object, OpenerComponent: Class<React.Component<*, *>> | string) => position =>\n        (this.node.hasChildren(item) || this.node.isAsync(item)) && this.props.openerOpts.position === position ?\n            <OpenerComponent className={ this.node.mixCss(\"opener\") } onClick={ this.node.onOpener(item) }></OpenerComponent> :\n            null\n\n    render() {\n        const { model, folded, display, unique, loading } = this.props\n\n        if(folded)\n            return null\n\n        /* If data has to be retrieved asynchronously */\n        if(loading) {\n            return <span></span>\n        }\n\n        const OpenerComponent = this.props.opener || \"span\"\n        const list = model\n            .filter(m => !this.props.searched || this.props.filteredModel && this.props.filteredModel.has(m))\n            .map((item, idx) =>\n                <li key={ unique && unique(item) || idx }\n                    className={ this.node.liCss(item) }\n                    { ...this.node.getDragEvents(item) }>\n                    <span className={ this.node.mixCss(\"item\") } onClick={ this.node.onClick(item) }>\n                        { this.renderOpener(item, OpenerComponent)(\"left\") }\n                        { display && display(item, this.props) }\n                        { this.renderOpener(item, OpenerComponent)(\"right\") }\n                    </span>\n                    { this.renderSubtree(item) }\n                </li>\n            )\n\n        return (\n            <ul className={ this.node.ulCss() }\n                { ...this.node.getDragEvents(null, !this.props.depth) }>\n                { list }\n            </ul>\n        )\n    }\n}\nexport const TreeViewNode = withTransition({ key: props => props.folded || props.loading })(TreeViewNodeBaseClass)\n"]}