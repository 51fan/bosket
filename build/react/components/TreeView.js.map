{"version":3,"sources":["../../../src/react/components/TreeView.js"],"names":["React","withLabels","combine","withListener","tree","RootNode","defaults","TreeViewNode","TreeViewBaseClass","props","state","search","filtered","_state","get","set","s","setState","_props","onSearch","evt","input","currentTarget","value","trim","model","category","treeFilter","rootNode","onSelect","onDrag","dragndrop","drag","onDrop","drop","_unmounted","forceUpdate","keyDownListener","subscribe","onKey","keyUpListener","sort","rest","searchBar","mixCss","labels","wrapDragNDrop","PureComponent","TreeView","eventType","propName","autoMount"],"mappings":"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","file":"TreeView.js","sourcesContent":["// @flow\n\nimport React from \"react\"\nimport { withLabels, combine, withListener } from \"../traits\"\nimport { tree } from \"../../tools/trees\"\nimport { RootNode, defaults } from \"../../core\"\nimport { TreeViewNode } from \"./TreeViewNode\"\n\nimport type { RootNodeInput } from \"../../core/logic\"\n\nexport type TreeViewProps = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (newSelection: Object[], item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    display?:           (Object, Object[]) => any,\n    key?:               Object => string,\n    strategies?:        Object,\n    sort?:              (Object, Object) => number,\n    disabled?:          Object => boolean,\n    search?:            string => Object => boolean,\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    dragndrop?:         Object,\n    noOpener?:          boolean,\n    labels?:            Object,\n    css?:               { [key: string]: string },\n    transition?:        Object,\n    keyDownListener?:   Object,\n    keyUpListener?:     Object\n}\ntype TreeViewState = {\n    search: string,\n    filtered: null | Map<Object, *>\n}\n\nclass TreeViewBaseClass extends React.PureComponent<void, TreeViewProps, TreeViewState> {\n\n    /* Data & lifecycle */\n    rootNode: RootNode\n\n    state : TreeViewState = {\n        search: \"\",\n        filtered: null\n    }\n    _state = {\n        get: () => this.state,\n        set: (s: Object) => this.setState(s)\n    }\n    _props = {\n        get: () : RootNodeInput => ({ ...defaults, ...this.props })\n    }\n\n    constructor(props: TreeViewProps) {\n        super(props)\n        this.rootNode = new RootNode(\n            this._props,\n            {\n                onSelect:   this.props.onSelect,\n                onDrag:     this.props.dragndrop && this.props.dragndrop.drag || (() => {}),\n                onDrop:     this.props.dragndrop && this.props.dragndrop.drop\n            },\n            this._state,\n            () => { if(!this._unmounted) this.forceUpdate() }\n        )\n        if(props.keyDownListener) props.keyDownListener.subscribe(this.rootNode.onKey)\n        if(props.keyUpListener) props.keyUpListener.subscribe(this.rootNode.onKey)\n    }\n\n    /* Events */\n\n    onSearch = (evt: Event & { currentTarget: HTMLButtonElement }) => {\n        const input = evt.currentTarget.value\n        this.setState({\n            search: input,\n            filtered: !input.trim() ?\n                null :\n                tree(this.props.model, this.props.category)\n                    /* eslint-disable */\n                    .treeFilter((this.props.search: any)(input.trim()))\n                    /* eslint-enable */\n        })\n    }\n\n    /* Rendering */\n\n    render() {\n        const sort = this.props.sort\n        const { onSelect, ...rest } = this.props\n        const props : any = { ...defaults, ...rest }\n\n        const searchBar = !this.props.search ? null :\n                <input type=\"search\" className={ this.rootNode.mixCss(\"search\") }\n                    value={ this.state.search }\n                    placeholder={ this.props.labels && this.props.labels[\"search.placeholder\"] }\n                    onChange={ this.onSearch } />\n\n        return (\n            <div className={ this.rootNode.mixCss(\"TreeView\") }>\n                { searchBar }\n                <TreeViewNode\n                    { ...props }\n                    model={ sort ? this.props.model.sort(sort) : this.props.model }\n                    filteredModel={ this.state.filtered }\n                    onSelect={ this.rootNode.onSelect }\n                    dragndrop={ this.rootNode.wrapDragNDrop() }\n                    ancestors={ [] }\n                    sort={ sort }\n                    folded={ false }\n                    searched={ !!this.state.search.trim() }>\n                </TreeViewNode>\n            </div>\n        )\n    }\n}\n\n\nexport const TreeView = combine(\n    withLabels(defaults.labels),\n    withListener({ eventType: \"keydown\", propName: \"keyDownListener\", autoMount: true }),\n    withListener({ eventType: \"keyup\", propName: \"keyUpListener\", autoMount: true })\n)(TreeViewBaseClass)\n"]}