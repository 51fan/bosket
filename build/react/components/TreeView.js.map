{"version":3,"sources":["../../../src/react/components/TreeView.js"],"names":["React","withLabels","combine","withListener","tree","RootNode","defaults","TreeViewNode","TreeViewBaseClass","props","ancestors","state","search","filtered","_state","get","set","s","setState","_props","onSearch","evt","input","currentTarget","value","trim","model","category","treeFilter","rootNode","onSelect","onDrag","dragndrop","drag","onDrop","drop","onCancel","cancel","forceUpdate","keyDownListener","subscribe","onKey","keyUpListener","wrappedDragNDrop","wrapDragNDrop","nextProps","update","key","defaultsMix","sort","searchBar","mixCss","labels","PureComponent","TreeView","eventType","propName","autoMount"],"mappings":"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","file":"TreeView.js","sourcesContent":["// @flow\n\nimport React from \"react\"\nimport { withLabels, combine, withListener } from \"../traits\"\nimport { tree } from \"../../tools/trees\"\nimport { RootNode, defaults } from \"../../core\"\nimport { TreeViewNode } from \"./TreeViewNode\"\n\nimport type { RootNodeInput } from \"../../core/logic\"\n\nexport type TreeViewProps = {\n    model:              Object[],\n    category:           string,\n    selection:          Object[],\n    onSelect:           (newSelection: Object[], item: Object, ancestors: Object[], neighbours: Object[]) => void,\n    display?:           (Object, Object) => any,\n    key?:               Object => string,\n    strategies?:        Object,\n    sort?:              (Object, Object) => number,\n    disabled?:          Object => boolean,\n    search?:            string => Object => boolean,\n    async?:             (mixed => Promise<Object[]>) => Promise<Object[]>,\n    dragndrop?:         Object,\n    noOpener?:          boolean,\n    labels?:            Object,\n    css?:               { [key: string]: string },\n    transition?:        Object,\n    keyDownListener?:   Object,\n    keyUpListener?:     Object\n}\ntype TreeViewState = {\n    search: string,\n    filtered: null | Map<Object, *>\n}\n\nclass TreeViewBaseClass extends React.PureComponent<void, TreeViewProps, TreeViewState> {\n\n    /* Data & lifecycle */\n    rootNode: RootNode\n    defaultsMix: Object\n    wrappedDragNDrop: Object\n    ancestors = []\n\n    state : TreeViewState = {\n        search: \"\",\n        filtered: null\n    }\n    _state = {\n        get: () => this.state,\n        set: (s: Object) => this.setState(s)\n    }\n    _props = {\n        get: () : RootNodeInput => ({ ...defaults, ...this.props })\n    }\n\n    constructor(props: TreeViewProps) {\n        super(props)\n        this.rootNode = new RootNode(\n            this._props,\n            {\n                onSelect:   this.props.onSelect,\n                onDrag:     this.props.dragndrop && this.props.dragndrop.drag,\n                onDrop:     this.props.dragndrop && this.props.dragndrop.drop,\n                onCancel:   this.props.dragndrop && this.props.dragndrop.cancel\n            },\n            this._state,\n            this.forceUpdate\n        )\n        if(props.keyDownListener) props.keyDownListener.subscribe(this.rootNode.onKey)\n        if(props.keyUpListener) props.keyUpListener.subscribe(this.rootNode.onKey)\n        this.wrappedDragNDrop = this.rootNode.wrapDragNDrop()\n    }\n\n    /* Events */\n\n    onSearch = (evt: Event & { currentTarget: HTMLButtonElement }) => {\n        const input = evt.currentTarget.value\n        this.setState({\n            search: input,\n            filtered: !input.trim() ?\n                null :\n                tree(this.props.model, this.props.category)\n                    /* eslint-disable */\n                    .treeFilter((this.props.search: any)(input.trim()))\n                    /* eslint-enable */\n        })\n    }\n\n    /* Rendering */\n\n    componentWillReceiveProps(nextProps) {\n        let update = false\n        for(const key in defaults) {\n            if(nextProps[key] !== this.props[key]) {\n                update = true\n                break\n            }\n        }\n        if(update)\n            this.defaultsMix = { ...defaults, ...nextProps }\n    }\n\n    render() {\n        const sort = this.props.sort\n        const props : any = this.defaultsMix || { ...defaults, ...this.props }\n\n        const searchBar = !this.props.search ? null :\n            <input type=\"search\" className={ this.rootNode.mixCss(\"search\") }\n                value={ this.state.search }\n                placeholder={ this.props.labels && this.props.labels[\"search.placeholder\"] }\n                onChange={ this.onSearch } />\n\n        return (\n            <div className={ this.rootNode.mixCss(\"TreeView\") }>\n                { searchBar }\n                <TreeViewNode\n                    { ...props }\n                    model={ sort ? this.props.model.sort(sort) : this.props.model }\n                    filteredModel={ this.state.filtered }\n                    onSelect={ this.rootNode.onSelect }\n                    dragndrop={ this.wrappedDragNDrop }\n                    ancestors={ this.ancestors }\n                    sort={ sort }\n                    folded={ false }\n                    searched={ !!this.state.search.trim() }>\n                </TreeViewNode>\n            </div>\n        )\n    }\n}\n\n\nexport const TreeView = combine(\n    withLabels(defaults.labels),\n    withListener({ eventType: \"keyup\", propName: \"keyUpListener\", autoMount: true }),\n    withListener({ eventType: \"keydown\", propName: \"keyDownListener\", autoMount: true })\n)(TreeViewBaseClass)\n"]}