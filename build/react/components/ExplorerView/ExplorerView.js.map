{"version":3,"sources":["../../../../src/react/components/ExplorerView/ExplorerView.js"],"names":["React","TreeView","string","tree","deepMix","ExplorerView","conf","css","display","item","props","name","sort","a","b","category","localeCompare","key","search","input","i","contains","strategies","selection","click","fold","dragndrop","draggable","droppable","drop","target","event","updatedModel","model","filter","e","indexOf","updateModel","render","PureComponent"],"mappings":";;;;;;;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAsC,gBAAtC;;AASA,WAAaC,YAAb;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,sMAEIC,IAFJ,GAEoB;AACZC,iBAAK;AACDN,0BAAU;AADT,aADO;AAIZO,qBAAS,iBAACC,IAAD;AAAA,uBAAkB;AAAA;AAAA;AAAKA,yBAAK,MAAKC,KAAL,CAAWC,IAAhB;AAAL,iBAAlB;AAAA,aAJG;AAKZC,kBAAM,cAACC,CAAD,EAAYC,CAAZ;AAAA,uBACF,CAACD,EAAE,MAAKH,KAAL,CAAWK,QAAb,CAAD,KAA4B,CAACD,EAAE,MAAKJ,KAAL,CAAWK,QAAb,CAA7B,GAAsDF,EAAE,MAAKH,KAAL,CAAWC,IAAb,EAAmBK,aAAnB,CAAiCF,EAAE,MAAKJ,KAAL,CAAWC,IAAb,CAAjC,CAAtD,GACAE,EAAE,MAAKH,KAAL,CAAWK,QAAb,IAAyB,CAAC,CAA1B,GAA8B,CAF5B;AAAA,aALM;AAQZE,iBAAK,aAACR,IAAD;AAAA,uBAA2BA,KAAK,MAAKC,KAAL,CAAWC,IAAhB,CAA3B;AAAA,aARO;AASZO,oBAAQ,gBAACC,KAAD;AAAA,uBAAmB,UAACC,CAAD;AAAA,2BAAelB,OAAOkB,EAAE,MAAKV,KAAL,CAAWC,IAAb,CAAP,EAA2BU,QAA3B,CAAoCF,KAApC,CAAf;AAAA,iBAAnB;AAAA,aATI;AAUZG,wBAAY;AACRC,2BAAW,CAAC,WAAD,CADH;AAERC,uBAAO,CAAC,qBAAD,CAFC;AAGRC,sBAAM,CAAC,gBAAD;AAHE,aAVA;AAeZC,uBAAW;AACPC,2BAAW,IADJ;AAEPC,2BAAW,IAFJ;AAGPC,sBAAM,cAACC,MAAD,EAAiBrB,IAAjB,EAA+BsB,KAA/B,EAAoD;AACtD,wBAAIC,eAAe7B,KAAK,MAAKO,KAAL,CAAWuB,KAAhB,EAAuB,MAAKvB,KAAL,CAAWK,QAAlC,EAA4CmB,MAA5C,CAAmD,UAACC,CAAD;AAAA,+BAAe,MAAKzB,KAAL,CAAWa,SAAX,CAAqBa,OAArB,CAA6BD,CAA7B,IAAkC,CAAjD;AAAA,qBAAnD,CAAnB;AACA,wBAAGL,MAAH,EACIA,OAAO,MAAKpB,KAAL,CAAWK,QAAlB,iCAAmCe,OAAO,MAAKpB,KAAL,CAAWK,QAAlB,CAAnC,sBAAmE,MAAKL,KAAL,CAAWa,SAA9E,GADJ,KAGIS,4CAAoBA,YAApB,sBAAqC,MAAKtB,KAAL,CAAWa,SAAhD;AACJ,0BAAKb,KAAL,CAAW2B,WAAX,CAAuBL,YAAvB;AACH;AAVM;AAfC,SAFpB,QA+BIM,MA/BJ,GA+Ba;AAAA,mBACL,oBAAC,QAAD,EAAgBlC,QAAQ,MAAKE,IAAb,EAAmB,MAAKI,KAAxB,EAA+B,IAA/B,CAAhB,CADK;AAAA,SA/Bb;AAAA;;AAAA;AAAA,EAAkCV,MAAMuC,aAAxC;;;;;;;;kCAAalC,Y","file":"ExplorerView.js","sourcesContent":["// @flow\n\nimport React from \"react\"\n\nimport { TreeView } from \"../TreeView\"\nimport { string, tree, deepMix } from \"../../../tools\"\n\nimport type { TreeViewProps } from \"../TreeView\"\n\ntype ExplorerViewProps = {\n    updateModel: Object[] => void,\n    name: string\n} & TreeViewProps\n\nexport class ExplorerView extends React.PureComponent<void, ExplorerViewProps, void> {\n\n    conf : Object = {\n        css: {\n            TreeView: \"ExplorerView\"\n        },\n        display: (item: Object) => <a>{ item[this.props.name] }</a>,\n        sort: (a: Object, b: Object) =>\n            !a[this.props.category] === !b[this.props.category] ? a[this.props.name].localeCompare(b[this.props.name]) :\n            a[this.props.category] ? -1 : 1,\n        key: (item: Object) : string => item[this.props.name],\n        search: (input: string) => (i: Object) => string(i[this.props.name]).contains(input),\n        strategies: {\n            selection: [\"modifiers\"],\n            click: [\"unfold-on-selection\"],\n            fold: [\"opener-control\"]\n        },\n        dragndrop: {\n            draggable: true,\n            droppable: true,\n            drop: (target: Object, item: Object, event: DragEvent) => {\n                let updatedModel = tree(this.props.model, this.props.category).filter((e: Object) => this.props.selection.indexOf(e) < 0)\n                if(target)\n                    target[this.props.category] = [ ...target[this.props.category], ...this.props.selection ]\n                else\n                    updatedModel = [ ...updatedModel, ...this.props.selection ]\n                this.props.updateModel(updatedModel)\n            }\n        }\n    }\n\n    render = () =>\n        <TreeView { ...(deepMix(this.conf, this.props, true)) }></TreeView>\n}\n"]}