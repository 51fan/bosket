{"version":3,"sources":["../../../../src/react/components/ExplorerView/ExplorerView.js"],"names":["React","TreeView","string","tree","deepMix","ExplorerView","conf","css","display","props","name","item","sort","a","b","category","localeCompare","key","search","i","contains","input","strategies","selection","click","fold","dragndrop","draggable","droppable","drop","target","event","updatedModel","model","filter","indexOf","e","updateModel","render","PureComponent"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,OAAvB,QAAsC,gBAAtC;;AAEA,WAAaC,YAAb;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;AAAA;;AAAA,sMAEIC,IAFJ,GAEW;AACHC,iBAAK;AACDN,0BAAU;AADT,aADF;AAIHO,qBAAS;AAAA,uBAAQ;AAAA;AAAA;AAAK,0BAAKC,KAAL,CAAWC,IAAX,CAAgBC,IAAhB;AAAL,iBAAR;AAAA,aAJN;AAKHC,kBAAM,cAACC,CAAD,EAAIC,CAAJ;AAAA,uBACF,CAACD,EAAE,MAAKJ,KAAL,CAAWM,QAAb,CAAD,KAA4B,CAACD,EAAE,MAAKL,KAAL,CAAWM,QAAb,CAA7B,GAAsDF,EAAE,MAAKJ,KAAL,CAAWC,IAAb,EAAmBM,aAAnB,CAAiCF,EAAE,MAAKL,KAAL,CAAWC,IAAb,CAAjC,CAAtD,GACAG,EAAE,MAAKJ,KAAL,CAAWM,QAAb,IAAyB,CAAC,CAA1B,GAA8B,CAF5B;AAAA,aALH;AAQHE,iBAAK;AAAA,uBAAQN,KAAK,MAAKF,KAAL,CAAWC,IAAhB,CAAR;AAAA,aARF;AASHQ,oBAAQ;AAAA,uBAAS;AAAA,2BAAKhB,OAAOiB,EAAE,MAAKV,KAAL,CAAWC,IAAb,CAAP,EAA2BU,QAA3B,CAAoCC,KAApC,CAAL;AAAA,iBAAT;AAAA,aATL;AAUHC,wBAAY;AACRC,2BAAW,CAAC,WAAD,CADH;AAERC,uBAAO,CAAC,qBAAD,CAFC;AAGRC,sBAAM,CAAC,gBAAD;AAHE,aAVT;AAeHC,uBAAW;AACPC,2BAAW,IADJ;AAEPC,2BAAW,IAFJ;AAGPC,sBAAM,cAACC,MAAD,EAASnB,IAAT,EAAeoB,KAAf,EAAyB;AAC3B,wBAAIC,eAAe7B,KAAK,MAAKM,KAAL,CAAWwB,KAAhB,EAAuB,MAAKxB,KAAL,CAAWM,QAAlC,EAA4CmB,MAA5C,CAAmD;AAAA,+BAAK,MAAKzB,KAAL,CAAWc,SAAX,CAAqBY,OAArB,CAA6BC,CAA7B,IAAkC,CAAvC;AAAA,qBAAnD,CAAnB;AACA,wBAAGN,MAAH,EACIA,OAAO,MAAKrB,KAAL,CAAWM,QAAlB,iCAAmCe,OAAO,MAAKrB,KAAL,CAAWM,QAAlB,CAAnC,sBAAmE,MAAKN,KAAL,CAAWc,SAA9E,GADJ,KAGIS,4CAAoBA,YAApB,sBAAqC,MAAKvB,KAAL,CAAWc,SAAhD;AACJ,0BAAKd,KAAL,CAAW4B,WAAX,CAAuBL,YAAvB;AACH;AAVM;AAfR,SAFX,QA+BIM,MA/BJ,GA+Ba;AAAA,mBACL,oBAAC,QAAD,EAAelC,QAAQ,MAAKE,IAAb,EAAmB,MAAKG,KAAxB,EAA+B,IAA/B,CAAf,CADK;AAAA,SA/Bb;AAAA;;AAAA;AAAA,EAAkCT,MAAMuC,aAAxC;;;;;;;;kCAAalC,Y","file":"ExplorerView.js","sourcesContent":["import React from \"react\"\n\nimport { TreeView } from \"../RootNode\"\nimport { string, tree, deepMix } from \"../../../tools\"\n\nexport class ExplorerView extends React.PureComponent {\n\n    conf = {\n        css: {\n            TreeView: \"ExplorerView\"\n        },\n        display: item => <a>{ this.props.name(item) }</a>,\n        sort: (a, b) =>\n            !a[this.props.category] === !b[this.props.category] ? a[this.props.name].localeCompare(b[this.props.name]) :\n            a[this.props.category] ? -1 : 1,\n        key: item => item[this.props.name],\n        search: input => i => string(i[this.props.name]).contains(input),\n        strategies: {\n            selection: [\"modifiers\"],\n            click: [\"unfold-on-selection\"],\n            fold: [\"opener-control\"]\n        },\n        dragndrop: {\n            draggable: true,\n            droppable: true,\n            drop: (target, item, event) => {\n                let updatedModel = tree(this.props.model, this.props.category).filter(e => this.props.selection.indexOf(e) < 0)\n                if(target)\n                    target[this.props.category] = [ ...target[this.props.category], ...this.props.selection ]\n                else\n                    updatedModel = [ ...updatedModel, ...this.props.selection ]\n                this.props.updateModel(updatedModel)\n            }\n        }\n    }\n\n    render = () =>\n        <TreeView { ...deepMix(this.conf, this.props, true) }></TreeView>\n}"]}