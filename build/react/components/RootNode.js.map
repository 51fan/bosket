{"version":3,"sources":["../../../src/react/components/RootNode.js"],"names":["React","PropTypes","withListener","withLabels","tree","RootNode","defaults","TreeViewNode","TreeViewBaseClass","props","state","search","filtered","_state","get","set","setState","s","_props","Object","assign","onSearch","input","evt","target","value","trim","model","category","treeFilter","rootNode","onSelect","onDrag","dragndrop","drag","onDrop","drop","_unmounted","forceUpdate","keyDownListener","subscribe","onKey","keyUpListener","sort","rest","searchBar","mixCss","labels","wrapDragNDrop","PureComponent","propTypes","arrayOf","object","isRequired","string","selection","func","display","key","strategies","disabled","async","noOpener","bool","objectOf","css","transition","TreeView","eventType","propName","autoMount","reduce","accu","trait"],"mappings":"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","file":"RootNode.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { withListener, withLabels } from \"../traits\"\nimport { tree } from \"../../tools/trees\"\nimport { RootNode, defaults } from \"../../core\"\nimport { TreeViewNode } from \"./TreeNode\"\n\n/* Root component */\n\nclass TreeViewBaseClass extends React.PureComponent {\n\n    /* Data & lifecycle */\n\n    state = {\n        search: \"\",\n        filtered: null\n    }\n    _state = {\n        get: () => this.state,\n        set:  s => this.setState(s)\n    }\n    _props = {\n        get: () => Object.assign({}, { ...defaults }, this.props)\n    }\n\n    constructor(props) {\n        super(props)\n        this.rootNode = new RootNode(\n            this._props,\n            {\n                onSelect:   this.props.onSelect,\n                onDrag:     this.props.dragndrop && this.props.dragndrop.drag || (() => {}),\n                onDrop:     this.props.dragndrop && this.props.dragndrop.drop\n            },\n            this._state,\n            () => { if(!this._unmounted) this.forceUpdate() }\n        )\n        if(props.keyDownListener) props.keyDownListener.subscribe(this.rootNode.onKey)\n        if(props.keyUpListener) props.keyUpListener.subscribe(this.rootNode.onKey)\n    }\n\n    /* Events */\n\n    onSearch = evt => {\n        const input = evt.target.value\n        this.setState({\n            search: input,\n            filtered: !input.trim() ?\n                null :\n                tree(this.props.model, this.props.category)\n                    .treeFilter(this.props.search(input.trim()))\n        })\n    }\n\n    /* Rendering */\n\n    render() {\n        const { sort, ...rest } = this._props.get()\n\n        const searchBar = !this.props.search ? null :\n                <input type=\"search\" className={ this.rootNode.mixCss(\"search\") }\n                    value={ this.state.search }\n                    placeholder={ this.props.labels[\"search.placeholder\"] }\n                    onChange={ this.onSearch } />\n\n        return (\n            <div className={ this.rootNode.mixCss(\"TreeView\") }>\n                { searchBar }\n                <TreeViewNode\n                    { ...rest }\n                    model={ sort ? this.props.model.sort(sort) : this.props.model }\n                    filteredModel={ this.state.filtered }\n                    onSelect={ this.rootNode.onSelect }\n                    dragndrop={ this.rootNode.wrapDragNDrop() }\n                    ancestors={ [] }\n                    sort={ sort }\n                    searched={ this.state.search.trim() }>\n                </TreeViewNode>\n            </div>\n        )\n    }\n}\n\nTreeViewBaseClass.propTypes = {\n    // Required //\n\n    model:          PropTypes.arrayOf(PropTypes.object).isRequired,\n    category:       PropTypes.string.isRequired,\n    selection:      PropTypes.arrayOf(PropTypes.object).isRequired,\n    onSelect:       PropTypes.func.isRequired,\n\n    // Optional //\n\n    display:        PropTypes.func,\n    key:            PropTypes.func,\n    strategies:     PropTypes.object,\n    sort:           PropTypes.func,\n    disabled:       PropTypes.func,\n    search:         PropTypes.func,\n    async:          PropTypes.func,\n    dragndrop:      PropTypes.object,\n    noOpener:       PropTypes.bool,\n    labels:         PropTypes.objectOf(PropTypes.string),\n    css:            PropTypes.object,\n    transition:     PropTypes.object\n}\n\nexport const TreeView = [\n    withLabels(defaults.labels),\n    withListener({ eventType: \"keydown\", propName: \"keyDownListener\", autoMount: true }),\n    withListener({ eventType: \"keyup\", propName: \"keyUpListener\", autoMount: true })\n].reduce((accu, trait) => trait(accu), TreeViewBaseClass)\n\n"]}