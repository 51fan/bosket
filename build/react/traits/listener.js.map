{"version":3,"sources":["../../../src/react/traits/listener.js"],"names":["React","displayName","withListener","eventType","propName","mountOn","autoMount","regulate","props","listening","ticking","callback","subscribe","cb","onEvent","event","window","requestAnimationFrame","bind","mount","document","addEventListener","unmount","removeEventListener","nextProps","listener","Component"],"mappings":";;;;;;;;;;;;AAEA;;AAEA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,SAASC,WAAT,QAA4B,WAA5B;;AAEA,OAAO,IAAMC,eAAyB,SAAzBA,YAAyB;AAAA,mFAKT,EALS;AAAA,8BAC9BC,SAD8B;AAAA,QAC9BA,SAD8B,kCAClB,OADkB;AAAA,6BAE9BC,QAF8B;AAAA,QAE9BA,QAF8B,iCAEnB,UAFmB;AAAA,4BAG9BC,OAH8B;AAAA,QAG9BA,OAH8B,gCAGpB,IAHoB;AAAA,8BAI9BC,SAJ8B;AAAA,QAI9BA,SAJ8B,kCAIlB,KAJkB;AAAA,6BAK9BC,QAL8B;AAAA,QAK9BA,QAL8B,iCAKnB,KALmB;;AAAA,WAKF;AAAA;;AAAA;AAAA;;AAO5B;;AAEA,4BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AAgCnB;;AAhCmB,kHACTA,KADS;;AAAA,sBALnBC,SAKmB,GALP,KAKO;AAAA,sBAJnBC,OAImB,GAJT,KAIS;AAAA,sBAenBC,QAfmB,GAeR,IAfQ;;AAAA,sBAgBnBC,SAhBmB,GAgBP,UAACC,EAAD,EAA2C;AACnD,0BAAKF,QAAL,GAAgBE,EAAhB;AACH,iBAlBkB;;AAAA,sBAmBnBC,OAnBmB,GAmBT,UAASC,KAAT,EAAuB;AAAA;;AAC7B,wBAAG,KAAKJ,QAAR,EAAkB;AACd,4BAAGJ,QAAH,EAAa;AACT,gCAAG,CAAC,KAAKG,OAAT,EAAkB;AACd,oCAAMC,WAAW,KAAKA,QAAtB;AACAK,uCAAOC,qBAAP,CAA6B;AAAA,2CAAMN,SAASI,KAAT,EAAgB,YAAM;AAAE,+CAAKL,OAAL,GAAe,KAAf;AAAsB,qCAA9C,CAAN;AAAA,iCAA7B;AACH;AACD,iCAAKA,OAAL,GAAe,IAAf;AACH,yBAND,MAOI,KAAKC,QAAL,CAAcI,KAAd;AACP;AACJ,iBAXS,CAWRG,IAXQ,OAnBS;;AAAA,sBAkCnBC,KAlCmB,GAkCX,YAAM;AACV,wBAAG,CAAC,MAAKV,SAAT,EAAoB;AAChBW,iCAASC,gBAAT,CAA0BlB,SAA1B,EAAqC,MAAKW,OAA1C;AACA,8BAAKL,SAAL,GAAiB,IAAjB;AACH;AACJ,iBAvCkB;;AAAA,sBAyCnBa,OAzCmB,GAyCT,YAAM;AACZ,wBAAG,MAAKb,SAAR,EAAmB;AACfW,iCAASG,mBAAT,CAA6BpB,SAA7B,EAAwC,MAAKW,OAA7C;AACA,8BAAKL,SAAL,GAAiB,KAAjB;AACH;AACJ,iBA9CkB;;AAEf,oBAAGH,SAAH,EAAc,MAAKa,KAAL;AAFC;AAGlB;;AAZ2B;AAAA;AAAA,uDAcL;AACnB,yBAAKG,OAAL;AACH;AAhB2B;AAAA;AAAA,0DAkBFE,SAlBE,EAkBS;AACjC,wBAAGnB,OAAH,EAAYA,QAAQa,IAAR,CAAa,IAAb,EAAmBM,SAAnB,IAAgC,KAAKL,KAAL,EAAhC,GAA+C,KAAKG,OAAL,EAA/C;AACf;;AAED;;AAtB4B;AAAA;;;AAyD5B;;AAzD4B,yCA2DnB;AACL,wBAAMG,+BACDrB,QADC,EACU;AACRQ,mCAAW,KAAKA,SADR;AAERO,+BAAW,KAAKA,KAFR;AAGRG,iCAAW,KAAKA;AAHR,qBADV,CAAN;AAOA,2BAAO,oBAAC,SAAD,eAAgBG,QAAhB,EAAgC,KAAKjB,KAArC,EAAP;AACH;AApE2B;;AAAA;AAAA,UAClBR,MAAM0B,SADY,UAGrBzB,WAHqB,GAGPA,YAAY,cAAZ,EAA4ByB,SAA5B,CAHO;AAAA,KALE;AAAA,CAA/B;;;;;;;;kCAAMxB,Y","file":"listener.js","sourcesContent":["// @flow\n\n/* Adds a configurable global listener. */\n\nimport React from \"react\"\n\nimport type { trait } from \"./helpers\"\nimport { displayName } from \"./helpers\"\n\nexport const withListener : trait<> = ({\n        eventType = \"click\",\n        propName = \"listener\",\n        mountOn = null,\n        autoMount = false,\n        regulate = false } = {}) => Component =>\n    class extends React.Component<void, { listener: Object }, void> {\n\n        static displayName = displayName(\"withListener\", Component)\n        listening = false\n        ticking = false\n\n        /* Lifecycle */\n\n        constructor(props) {\n            super(props)\n            if(autoMount) this.mount()\n        }\n\n        componentWillUnmount() {\n            this.unmount()\n        }\n\n        componentWillReceiveProps(nextProps) {\n            if(mountOn) mountOn.bind(this)(nextProps) ? this.mount() : this.unmount()\n        }\n\n        /* Subscriptions */\n\n        callback = null\n        subscribe = (cb: (Event, ?(void => void)) => mixed) => {\n            this.callback = cb\n        }\n        onEvent = function(event: Event) {\n            if(this.callback) {\n                if(regulate) {\n                    if(!this.ticking) {\n                        const callback = this.callback\n                        window.requestAnimationFrame(() => callback(event, () => { this.ticking = false }))\n                    }\n                    this.ticking = true\n                } else\n                    this.callback(event)\n            }\n        }.bind(this)\n\n        /* Events */\n\n        mount = () => {\n            if(!this.listening) {\n                document.addEventListener(eventType, this.onEvent)\n                this.listening = true\n            }\n        }\n\n        unmount = () => {\n            if(this.listening) {\n                document.removeEventListener(eventType, this.onEvent)\n                this.listening = false\n            }\n        }\n\n        /* Rendering */\n\n        render() {\n            const listener = {\n                [propName]: {\n                    subscribe: this.subscribe,\n                    mount:     this.mount,\n                    unmount:   this.unmount\n                }\n            }\n            return <Component { ...listener } { ...this.props } ></Component>\n        }\n    }\n"]}